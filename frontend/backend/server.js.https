// Modified server.js with HTTPS support
import express from 'express';
import bcrypt from 'bcrypt';
import cors from 'cors';
import CryptoJS from 'crypto-js';
import fetch from 'node-fetch';
import jwt from 'jsonwebtoken';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import https from 'https';

const app = express();
const PORT = process.env.PORT || 3000;
const SECRET_KEY = '65-a4fdy777nn98sns866by66554fdrfrtty';

// SSL Certificate configuration
const CERT_FILE = process.env.SSL_CERT || './certs/certificate.crt';
const KEY_FILE = process.env.SSL_KEY || './certs/private.key';

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));
app.use(cors({
  origin: '*', // Allow all origins for development
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Create uploads directory if it doesn't exist
if (!fs.existsSync('uploads')) {
  fs.mkdirSync('uploads');
}

// Ensure the /uploads directory is served correctly
app.use('/uploads', express.static('uploads'));

// [Copy the rest of your server.js file here]
// This is just a placeholder

// Start the server with HTTPS
try {
  const httpsOptions = {
    key: fs.readFileSync(KEY_FILE),
    cert: fs.readFileSync(CERT_FILE)
  };
  
  https.createServer(httpsOptions, app).listen(PORT, () => {
    console.log(`Server running on https://mpp.local:${PORT}`);
  });
} catch (error) {
  console.error(`Failed to start with HTTPS: ${error.message}`);
  console.log('Falling back to HTTP...');
  
  app.listen(PORT, () => {
    console.log(`Server running on http://mpp.local:${PORT}`);
  });
}
