# filepath: d:\MPP\frontend\backend\Repository.py.railway
from flask import Flask, request, jsonify, render_template
import pyodbc
from monitor_thread import monitor_comments
import datetime
from functools import wraps
import jwt as pyjwt  # Rename to avoid confusion
import random
import string
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
from dotenv import load_dotenv
import ssl

app = Flask(__name__)
load_dotenv()  # Load environment variables

# Email Configuration
GMAIL_USER = os.getenv('GMAIL_USER', 'your-email@gmail.com')
GMAIL_APP_PASSWORD = os.getenv('GMAIL_APP_PASSWORD', 'your-app-password')

# Determine environment and get connection string
is_railway = os.getenv('RAILWAY_ENVIRONMENT') is not None
use_https = os.getenv('USE_HTTPS', 'false').lower() == 'true'

# Use either Railway provided DATABASE_URL or our default
if is_railway:
    # Parse Railway's DATABASE_URL and format it for pyodbc
    db_url = os.getenv('DATABASE_URL', '')
    if db_url:
        # Railway might provide a connection string, we need to adapt it
        # This is a simplified version, you might need to adjust based on what Railway provides
        sql_host = os.getenv('RAILWAY_DATABASE_HOST', 'sqlserver')
        sql_user = os.getenv('RAILWAY_DATABASE_USER', 'sa')
        sql_password = os.getenv('RAILWAY_DATABASE_PASSWORD', 'StrongPassword123!')
        sql_port = os.getenv('RAILWAY_DATABASE_PORT', '1433')
        SQL_SERVER_CONNECTION_STRING = f'mssql+pyodbc://{sql_user}:{sql_password}@{sql_host}:{sql_port}/MusicLibrary?driver=ODBC+Driver+17+for+SQL+Server'
    else:
        SQL_SERVER_CONNECTION_STRING = 'mssql+pyodbc://sa:StrongPassword123!@sqlserver:1433/MusicLibrary?driver=ODBC+Driver+17+for+SQL+Server'
else:
    SQL_SERVER_CONNECTION_STRING = os.getenv('SQL_SERVER_CONNECTION_STRING', 
                                         'mssql+pyodbc://sa:StrongPassword123!@database:1433/MusicLibrary?driver=ODBC+Driver+17+for+SQL+Server')

# Certificate paths
CERT_FILE = os.getenv('SSL_CERT', './certs/certificate.crt')
KEY_FILE = os.getenv('SSL_KEY', './certs/private.key')

# Set your secret key for JWT - keep this very secure in production
app.config['SECRET_KEY'] = os.getenv('JWT_SECRET_KEY', 'admin-secret-key-change-this-in-production')

def generate_admin_token(admin_id, email):
    expiration = datetime.datetime.utcnow() + datetime.timedelta(hours=24)  # Token expires in 24 hours
    token = pyjwt.encode({
        'admin_id': admin_id,
        'email': email,
        'exp': expiration.timestamp()  # Convert to Unix timestamp
    }, app.config['SECRET_KEY'], algorithm='HS256')
    return token

# [Copy the rest of your Repository.py file here]
# This is just a placeholder for now

if __name__ == '__main__':
    try:
        # Get port from environment variable for Railway
        port = int(os.environ.get("PORT", 5000))
        
        if use_https and not is_railway:
            # Use HTTPS configuration with certificates
            context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
            context.load_cert_chain(CERT_FILE, KEY_FILE)
            app.run(host='0.0.0.0', port=port, ssl_context=context, debug=False)
        else:
            # Standard configuration
            app.run(host='0.0.0.0', port=port, debug=False)
    except Exception as e:
        print(f"Error starting Flask application: {e}")
