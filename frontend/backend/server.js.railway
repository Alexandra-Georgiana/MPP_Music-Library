import express from 'express';
import bcrypt from 'bcrypt';
import cors from 'cors';
import CryptoJS from 'crypto-js';
import fetch from 'node-fetch';
import jwt from 'jsonwebtoken';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import https from 'https';
import http from 'http';

const app = express();
const PORT = process.env.PORT || 3000;
const SECRET_KEY = process.env.JWT_SECRET_KEY || '65-a4fdy777nn98sns866by66554fdrfrtty';

// Determine environment
const isRailway = process.env.RAILWAY_ENVIRONMENT !== undefined;
const useHttps = process.env.USE_HTTPS === 'true';

// SSL Certificate configuration
const CERT_FILE = process.env.SSL_CERT || './certs/certificate.crt';
const KEY_FILE = process.env.SSL_KEY || './certs/private.key';

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));

// Configure CORS
const allowedOrigins = [
  'https://mpp.local', 
  'http://localhost:3000',
  'http://localhost:5173',
  process.env.FRONTEND_URL || '*',
  process.env.RAILWAY_PUBLIC_DOMAIN ? `https://${process.env.RAILWAY_PUBLIC_DOMAIN}` : '*',
  process.env.RAILWAY_SERVICE_FRONTEND_URL || '*'
];

app.use(cors({
  origin: function(origin, callback) {
    // Allow requests with no origin (like mobile apps or curl requests)
    if(!origin) return callback(null, true);
    
    if(isRailway || allowedOrigins.includes(origin) || allowedOrigins.includes('*')) {
      return callback(null, true);
    }
    
    callback(new Error('CORS policy violation'), false);
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Create uploads directory using absolute path
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  try {
    // Check if the path exists but is a file
    if (fs.existsSync(uploadsDir) && fs.statSync(uploadsDir).isFile()) {
      console.error('Error: uploads path exists but is a file');
      fs.renameSync(uploadsDir, `${uploadsDir}_file_bak_${Date.now()}`);
    }
    fs.mkdirSync(uploadsDir, { recursive: true });
    console.log(`Created uploads directory at: ${uploadsDir}`);
  } catch (error) {
    console.error(`Failed to create uploads directory: ${error.message}`);
  }
}

// Ensure the /uploads directory is served correctly with absolute path
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// [Copy the rest of your server.js file here]
// This is just a placeholder

// Start the server with appropriate protocol
try {
  if (useHttps && !isRailway) {
    // Use HTTPS for local development
    const httpsOptions = {
      key: fs.readFileSync(KEY_FILE),
      cert: fs.readFileSync(CERT_FILE)
    };
    
    https.createServer(httpsOptions, app).listen(PORT, () => {
      console.log(`Server running on https://mpp.local:${PORT}`);
    });
  } else {
    // Use HTTP for Railway (Railway provides HTTPS automatically)
    http.createServer(app).listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
    });
  }
} catch (error) {
  console.error(`Failed to start server: ${error.message}`);
}
